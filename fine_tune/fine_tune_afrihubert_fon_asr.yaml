# ################################
# Model: wav2vec2 + DNN + CTC
# Augmentation: SpecAugment
# Authors: Abdou Mohamed Naira 2022
# ################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1337 #7777
__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]
debug: False
device: cuda
exp_name: !ref AfriHubert_CTC_Avec_Diacritics
output_folder: !ref /users/fkponou/data/speechbrain/BestProjects/output/<exp_name>
test_wer_file: !ref <output_folder>/wer_test.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt


root_data_folder: !ref /users/fkponou/data/for_asr 
data_folder: !ref <root_data_folder>/fongbe_one

accented_letters: True
language: fongbe
train_csv: !ref <root_data_folder>/train_clean.csv
valid_csv: !ref <root_data_folder>/valid_clean.csv
test_csv: !ref <root_data_folder>/test_clean.csv

avoid_if_longer_than: 15.0

####################### Training Parameters ####################################
number_of_epochs: 50
lr: 1
lr_hubert: 0.0001
sorting: ascending
precision: fp32 # bf16, fp16 or fp32
sample_rate: 16000
ckpt_interval_minutes: 30 # save checkpoint every N min

# With data_parallel batch_size is split into N jobs
# With DDP batch_size is multiplied by N jobs
# Must be 6 per GPU to fit 16GB of VRAM
batch_size: 4
test_batch_size: 4

dataloader_options:
    batch_size: !ref <batch_size>
    num_workers: 2
test_dataloader_options:
    batch_size: !ref <test_batch_size>
    num_workers: 2

# BPE parameters
token_type: char  # ["unigram", "bpe", "char"]
character_coverage: 1.0
#######################


hubert_hub: ajesujoba/AfriHuBERT
hubert_folder: !ref <save_folder>/hubert

# hubert 2.0 specific parameters
hubert_frozen: False

features_dim: 768

####################### Model Parameters #######################################
wav2vec_output_dim: 1024
dnn_neurons: 1024
freeze_wav2vec: False

# Outputs
output_neurons:  62  # BPE size, index(blank/eos/bos) = 0

# Decoding parameters
# Be sure that the bos and eos index match with the BPEs ones
blank_index: 0
bos_index: 1
eos_index: 2


tokenizer: !new:sentencepiece.SentencePieceProcessor
    # model_file: /users/fkponou/data/speechbrain/NewProjects/output/fon_tokenizer/1000_char.model
#
# Functions and classes
#
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

############################## Augmentations ###################################

# Speed perturbation
speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: [95, 100, 105]

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: 0
    drop_freq_high: 1
    drop_freq_count_low: 1
    drop_freq_count_high: 3
    drop_freq_width: 0.05

# Time drop: randomly drops a number of temporal chunks.
drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
    drop_length_low: 1000
    drop_length_high: 2000
    drop_count_low: 1
    drop_count_high: 5

enc: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, null, !ref <features_dim>]
    linear1: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation: !new:torch.nn.LeakyReLU
    drop: !new:torch.nn.Dropout
        p: 0.15
    linear2: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation2: !new:torch.nn.LeakyReLU
    drop2: !new:torch.nn.Dropout
        p: 0.15
    linear3: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn3: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation3: !new:torch.nn.LeakyReLU

hubert: !new:speechbrain.lobes.models.huggingface_transformers.hubert.HuBERT
    source: !ref <hubert_hub>
    output_norm: True
    freeze: !ref <hubert_frozen>
    save_path: !ref <hubert_folder>

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dnn_neurons>
    n_neurons: !ref <output_neurons>

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>

modules:
    hubert: !ref <hubert>
    enc: !ref <enc>
    ctc_lin: !ref <ctc_lin>

model: !new:torch.nn.ModuleList
    - [!ref <enc>, !ref <ctc_lin>]

model_opt_class: !name:torch.optim.Adadelta
    lr: !ref <lr>
    rho: 0.95
    eps: 1.e-8

hubert_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_hubert>


warmup: 8000
hold: 32000
cooldown: 40000
optimizer_step_limit: 1200000


lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.5
    patient: 2

lr_annealing_hubert: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_hubert>
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 2

# lr_annealing_hubert: !new:speechbrain.nnet.schedulers.TriStageLRSchedule
    # lr: !ref <lr_hubert>
    # warmup_steps: !ref <warmup>
    # hold_steps: !ref <hold>
    # decay_steps: !ref <cooldown>
    # total_steps: !ref <optimizer_step_limit>


checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        hubert: !ref <hubert>
        model: !ref <model>
        scheduler_model: !ref <lr_annealing_model>
        scheduler_hubert: !ref <lr_annealing_hubert>
        counter: !ref <epoch_counter>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True